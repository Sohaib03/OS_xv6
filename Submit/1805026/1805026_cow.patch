diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..f34857d
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "C_Cpp.default.configurationProvider": "ms-vscode.makefile-tools"
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..b7232a6 100644
--- a/Makefile
+++ b/Makefile
@@ -117,6 +117,7 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 
 UPROGS=\
 	$U/_cat\
+	$U/_cowtest\
 	$U/_echo\
 	$U/_forktest\
 	$U/_grep\
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..3183148 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             inc_ref(uint64 pa);
+uint64          copy_page(pagetable_t pgt, uint64 va);
+int             is_cow(pagetable_t pgt, uint64 va);
 
 // log.c
 void            initlog(int, struct superblock*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..57690fb 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -14,6 +14,7 @@ void freerange(void *pa_start, void *pa_end);
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
+
 struct run {
   struct run *next;
 };
@@ -23,9 +24,19 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct pageinfo {
+  struct spinlock lock;
+  int cnt;
+};
+
+struct pageinfo page_ref[PHYSTOP/PGSIZE];
+
 void
 kinit()
 {
+  for (int i=0; i < (PHYSTOP / PGSIZE); i++) {
+    initlock(&(page_ref[i].lock), "page_ref");
+  }
   initlock(&kmem.lock, "kmem");
   freerange(end, (void*)PHYSTOP);
 }
@@ -35,8 +46,10 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE) {
+    page_ref[(uint64)p/PGSIZE].cnt = 1;
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -51,6 +64,17 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  int pg_idx = (uint64)pa/PGSIZE;
+  acquire(&(page_ref[pg_idx].lock));
+  page_ref[pg_idx].cnt--;
+
+  if (page_ref[pg_idx].cnt > 0) {
+    // printf("Ref detected\n");
+    release(&(page_ref[pg_idx].lock));
+    return;
+  }
+  release(&(page_ref[pg_idx].lock));
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -76,7 +100,68 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
+  if(r) {
     memset((char*)r, 5, PGSIZE); // fill with junk
+    int pg_idx = (uint64)r/PGSIZE;
+    acquire(&(page_ref[pg_idx].lock));
+    page_ref[pg_idx].cnt = 1;
+    release(&(page_ref[pg_idx].lock));
+  }
   return (void*)r;
 }
+
+int inc_ref(uint64 pa) {
+  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+    return -1;
+  int pg_idx = pa/PGSIZE;
+  acquire(&(page_ref[pg_idx].lock));
+  page_ref[pg_idx].cnt++;
+  release(&(page_ref[pg_idx].lock));
+  return 1;
+}
+
+int is_cow(pagetable_t pgt, uint64 va) {
+  if (va > MAXVA) return 0;
+
+  pte_t *pte = walk(pgt, va, 0);
+  if (pte == 0) return 0;
+  if ( ((*pte)&PTE_V) == 0 ) return 0;
+  return ((*pte)&PTE_COW);
+}
+
+uint64 copy_page(pagetable_t pgt, uint64 va) {
+
+  if (is_cow(pgt, va) == 0) return 0;
+
+  va = PGROUNDDOWN(va);
+  pte_t *pte = walk(pgt, va, 0);
+  uint64 pa = PTE2PA(*pte);
+
+  int pg_idx = (uint64) pa / PGSIZE;
+
+  acquire(&(page_ref[pg_idx].lock));
+  if (page_ref[pg_idx].cnt == 1) {
+    *pte = (*pte) & (~PTE_COW);
+    *pte = (*pte) | (PTE_W);
+    release(&(page_ref[pg_idx].lock));
+    return pa;
+  } 
+  release(&(page_ref[pg_idx].lock));
+
+  char *mem = kalloc();
+  if (mem == 0) return 0; // memory alloc failed;
+
+  memmove(mem, (char *) pa, PGSIZE);
+  *pte = (*pte) & (~PTE_V);
+
+  uint64 flag = PTE_FLAGS(*pte);
+  flag |= PTE_W;
+  flag &= (~PTE_COW);
+
+  if (mappages(pgt, va, PGSIZE, (uint64) mem, flag) != 0){
+    kfree(mem);
+    return 0;
+  }
+  kfree((char*) PGROUNDDOWN(pa));
+  return (uint64) mem;
+}
\ No newline at end of file
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..50f9397 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -344,6 +344,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
 
+#define PTE_COW (1L << 8) // cowpage
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..33ee1a2 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,7 +67,20 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } else if (r_scause() == 13 || r_scause() == 15) {
+    // printf("Trap on cow\n");
+    uint64 va = PGROUNDDOWN(r_stval());
+    if (va > p->sz || va == 0 ) {
+      setkilled(p);
+    }
+    else if (is_cow(p->pagetable , va) == 0) {
+      setkilled(p);
+    }
+    else if (copy_page(p->pagetable, va) == 0) {
+      setkilled(p);
+    }
+  }
+   else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..31b4069 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,22 +308,27 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+
     pa = PTE2PA(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    *pte = (*pte) & (~PTE_W);
+    *pte = (*pte) | (PTE_COW);
+
+    flags = PTE_FLAGS(*pte); // fetch the flags 
+
+    //map the childs pte to parent's pa
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      // kfree(mem);
       goto err;
     }
+    // inc_ref(pa);
+    if (inc_ref(pa) != 1) return -1;
+
   }
   return 0;
 
@@ -355,9 +360,15 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if (va0 >= MAXVA) return -1;
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
+    
+    if (is_cow(pagetable, va0) != 0) {
+      pa0 = copy_page(pagetable, va0);
+    }
+
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
diff --git a/user/cowtest.c b/user/cowtest.c
new file mode 100644
index 0000000..05d2993
--- /dev/null
+++ b/user/cowtest.c
@@ -0,0 +1,88 @@
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+
+void
+read_test()
+{
+  uint64 phys_size = PHYSTOP - KERNBASE;
+  int sz = (phys_size / 3) * 2;
+  
+  char *p = sbrk(sz);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", sz);
+    exit(-1);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = 1234;
+  }
+
+  int pid = fork();
+  if(pid < 0){
+    printf("fork() failed\n");
+    exit(-1);
+  }
+
+  if(pid == 0)
+    exit(0);
+
+  wait(0);
+
+  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", sz);
+    exit(-1);
+  }
+
+  printf("read ok\n");
+}
+
+void
+write_test()
+{
+  uint64 phys_size = PHYSTOP - KERNBASE;
+  int sz = (phys_size / 3);
+  
+  char *p = sbrk(sz);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", sz);
+    exit(-1);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = 1234;
+  }
+
+  int pid = fork();
+  if(pid < 0){
+    printf("fork() failed\n");
+    exit(-1);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = 1234;
+  }
+
+  if(pid == 0)
+    exit(0);
+
+  wait(0);
+
+  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", sz);
+    exit(-1);
+  }
+
+  printf("write ok\n");
+}
+
+int
+main(int argc, char *argv[])
+{
+  for (int i=0; i<10; i++)
+    read_test();
+  for (int i=0; i<10; i++)
+    write_test();
+  printf("ALL OK\n");
+  exit(0);
+}
